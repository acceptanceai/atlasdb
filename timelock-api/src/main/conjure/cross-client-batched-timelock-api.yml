types:
  imports:
    LeaderTime:
      base-type: any
      external:
        java: com.palantir.lock.v2.LeaderTime
    Long:
      base-type: any
      external:
        java: java.lang.Long
    LockWatchStateUpdate:
      base-type: any
      external:
        java: com.palantir.lock.watch.LockWatchStateUpdate
    ConjureIdentifiedVersion:
      base-type: any
      external:
        java: com.palantir.atlasdb.timelock.api.ConjureIdentifiedVersion
    GetCommitTimestampsRequest:
      base-type: any
      external:
        java: com.palantir.atlasdb.timelock.api.GetCommitTimestampsRequest
    GetCommitTimestampsResponse:
      base-type: any
      external:
        java: com.palantir.atlasdb.timelock.api.GetCommitTimestampsResponse
  definitions:
    default-package: com.palantir.atlasdb.timelock.api
    objects:
      NamespacedLeaderTime:
        fields:
          namespace: string
          leaderTime: LeaderTime
      NamespacedGetCommitTimestampsRequest:
        fields:
          namespace: string
          getCommitTimestampsRequest: GetCommitTimestampsRequest
      NamespacedGetCommitTimestampsResponse:
        fields:
          namespace: string
          getCommitTimestampsResponse: GetCommitTimestampsResponse

services:
  CrossClientBatchedConjureTimelockService:
    name: Cross Client Batched Timelock Service
    default-auth: header
    package: com.palantir.atlasdb.timelock.batch.api
    base-path: /tl/batch
    endpoints:
      leaderTimes:
        http: POST /lts
        args:
          namespaces: set<string>
        returns: list<NamespacedLeaderTime>
        docs: |
          Cross client batched version of ConjureTimelockService#leaderTime endpoint for acquiring leaderTimes.
      getCommitTimestamps:
        http: POST /gcts
        args:
          requests: list<NamespacedGetCommitTimestampsRequest>
        returns: list<NamespacedGetCommitTimestampsResponse>
        docs: |
          Cross client batched version of ConjureTimelockService#getCommitTimestamps for acquiring commit timestamps.
